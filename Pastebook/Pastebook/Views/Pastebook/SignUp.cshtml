@model PastebookDataLibrary.USER
@{
        ViewBag.ListOfGender = new SelectList(new List<SelectListItem> {
                            new SelectListItem { Value="U",Text= "Unspecified",Selected =true },
                            new SelectListItem { Value = "M",Text="Male"},
                               new SelectListItem {Value = "F", Text ="Female" }
                           }, "Value", "Text");
    Layout = "~/Views/Shared/_LayoutLogin.cshtml";
}

@using (Html.BeginForm("SignUp", "Pastebook", FormMethod.Post))
{
    @Html.AntiForgeryToken() 
                <div class="form-horizontal"> 
                    <div class="form-group formSignup">
                        <div class="col-md-3">
                                <button type="button" onclick="location.href='@Url.Action("Login","Pastebook")'" class="btn-default btn btn-primary "><span class="glyphicon glyphicon-chevron-left"></span><strong>BACK</strong></button>                        
                        </div>
                        <div class="col-md-offset-1 col-md-4">
                            <h4 class="grayText"><strong>SIGN UP</strong></h4>
                        </div>
                    </div>
                    <div class="form-group formSignup">
                        <div class="col-md-4">
                            <strong class="redText">Required(<span class="glyphicon glyphicon-asterisk"></span>)</strong>
                        </div>
                    </div>
                    <div class="form-group formSignup">
                        <div class="col-md-6"> 
                            @Html.LabelFor(model => model.USER_NAME, htmlAttributes: new { @class = "control-label" }) <strong class="redText asteriskSize">*</strong>
                            @Html.EditorFor(model => model.USER_NAME, new { htmlAttributes = new { @class = "form-control",@placeholder="Username" } })
                            <span id="errorUserName" class="text-danger"></span>
                            @Html.ValidationMessageFor(model => model.USER_NAME, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.EMAIL_ADDRESS, htmlAttributes: new { @class = "control-label" })<strong class="redText asteriskSize">*</strong>
                            @Html.EditorFor(model => model.EMAIL_ADDRESS, new { htmlAttributes = new { @class = "form-control",@placeholder="Email Address" } })
                            <span id="errorEmail" class="text-danger"></span>
                            @Html.ValidationMessageFor(model => model.EMAIL_ADDRESS, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group formSignup"> 
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.PASSWORD, htmlAttributes: new { @class = "control-label " })<strong class="redText asteriskSize">*</strong>
                            @Html.EditorFor(model => model.PASSWORD, new { htmlAttributes = new { @class = "form-control" ,@placeholder="Password"} })
                            @Html.ValidationMessageFor(model => model.PASSWORD, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6">
                            <label for="ConfirmPassword" class="control-label">Confirm Password
                            </label><strong class="redText asteriskSize">*</strong>
                            <input type="password" class="form-control" name="ConfirmPassword" id="ConfirmPassword" placeholder="Confirm Password"/>
                            <span id="confirmError"  class="text-danger"></span>
                            @Html.ValidationMessage("ConfirmPassword",new { @class="text-danger"})
                        </div>
                    </div>
                    <div class="form-group formSignup">
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.FIRST_NAME, htmlAttributes: new { @class = "control-label" })<strong class="redText asteriskSize">*</strong>
                            @Html.EditorFor(model => model.FIRST_NAME, new { htmlAttributes = new { @class = "form-control" ,@placeholder="Firstname"} })
                            @Html.ValidationMessageFor(model => model.FIRST_NAME, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6  ">
                            @Html.LabelFor(model => model.LAST_NAME, htmlAttributes: new { @class = "control-label" })<strong class="redText asteriskSize">*</strong>
                            @Html.EditorFor(model => model.LAST_NAME, new { htmlAttributes = new { @class = "form-control", @placeholder="Lastname" } })
                            @Html.ValidationMessageFor(model => model.LAST_NAME, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group formSignup">
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.BIRTHDAY, htmlAttributes: new { @class = "control-label" })<strong class="redText asteriskSize">*</strong>
                            @Html.EditorFor(model => model.BIRTHDAY, new { htmlAttributes = new { @class = "form-control date",@readonly=true,@type="text",@placeholder="Birthday" } })
                            @Html.ValidationMessageFor(model => model.BIRTHDAY, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.COUNTRY_ID, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(model => model.COUNTRY_ID, new SelectList(ViewBag.CountryList, "ID", "Country"), "--Select Country--", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.COUNTRY_ID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group formSignup">
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.MOBILE_NO, htmlAttributes: new { @class = "control-label " })
                            @Html.EditorFor(model => model.MOBILE_NO, new { htmlAttributes = new { @class = "form-control",@placeholder="Mobile number" } })
                            @Html.ValidationMessageFor(model => model.MOBILE_NO, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.GENDER, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(model => model.GENDER, (SelectList)ViewBag.ListOfGender, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.GENDER, "", new { @class = "text-danger" }) 
                        </div>
                    </div>
                    <div class="form-group formSignup">
                        <div class="col-md-12"> 
                            <button id="submitSignUp" type="submit" class="btn btnMain btn-default btn-block btn-primary wide"><strong>SIGN UP</strong></button>
                        </div>
                    </div>
                </div> 
             
}
 

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var checkUserNameUrl = '@Url.Action("CheckUserNameIfValid","Pastebook")';
        var checkEmailUrl = '@Url.Action("CheckEmailIfValid","Pastebook")';


        $(function () {
            $("#BIRTHDAY").datepicker({
                maxDate: "0" ,
                changeMonth: true,
                changeYear: true,
                showOn: "button", 
                buttonText: "Select date",
                dateFormat: "yy/mm/dd" 
            });
        });

        $("#submitSignUp").click(function () { 
            if ($("#ConfirmPassword").val() == "") {
                $("#confirmError").text("Confirm password is required");
            }
        });

        $("#USER_NAME").blur(function () {
            if ($("#USER_NAME").val() != "") {
                CheckUserName();
            } 
        });


        function CheckConfirmPassword() {
            if ($("#PASSWORD").val() != $("#ConfirmPassword").val()) {
                $("#confirmError").text("Passwords do not match");
            } else {
                $("#confirmError").text("");
            }
        }

        $("#ConfirmPassword").blur(function () {
            CheckConfirmPassword();
        });

        function CheckUserName() {
            var data = {
                userName: $("#USER_NAME").val()
            };
            $.ajax({
                url: checkUserNameUrl,
                data: data,
                type: 'GET',
                success: function (result) {
                    if (result.IsValid == false) {
                        $("#errorUserName").text("Username already taken.");
                    } else {
                        $("#errorUserName").text("");
                    }
                }
            });
        }


        $("#EMAIL_ADDRESS").blur(function () {
            if ($("#EMAIL_ADDRESS").val() != "") { 
                var data = {
                    email: $("#EMAIL_ADDRESS").val()
                };
                $.ajax({
                    url: checkEmailUrl,
                    data: data,
                    type: 'GET',
                    success: function (result) {
                        if (result.IsValid == false) {
                            $("#errorEmail").text("Email Address already taken.");
                        } else {
                            $("#errorEmail").text("");
                        }
                    }
                });
            }
        });
    </script>
}
